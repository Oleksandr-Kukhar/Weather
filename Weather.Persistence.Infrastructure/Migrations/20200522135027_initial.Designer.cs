// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Weather.Persistence.Infrastructure;

namespace Weather.Persistence.Infrastructure.Migrations
{
    [DbContext(typeof(SensorsDataBaseContext))]
    [Migration("20200522135027_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Weather.Persistence.Model.Humidity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MeasurementUnits")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegisterTime")
                        .HasColumnType("datetime2");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Humidity");

                    b.HasData(
                        new
                        {
                            Id = new Guid("993f8938-7824-43a0-9781-a8caca08be80"),
                            MeasurementUnits = "%",
                            RegisterTime = new DateTime(2020, 5, 22, 16, 50, 27, 261, DateTimeKind.Local).AddTicks(7885),
                            Value = 50.0
                        });
                });

            modelBuilder.Entity("Weather.Persistence.Model.Pressure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MeasurementUnits")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegisterTime")
                        .HasColumnType("datetime2");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Pressure");

                    b.HasData(
                        new
                        {
                            Id = new Guid("80efcaf4-b31f-4dcd-84c9-c430df59e382"),
                            MeasurementUnits = "hPa",
                            RegisterTime = new DateTime(2020, 5, 22, 16, 50, 27, 261, DateTimeKind.Local).AddTicks(5165),
                            Value = 1010.0
                        });
                });

            modelBuilder.Entity("Weather.Persistence.Model.Temperature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MeasurementUnits")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegisterTime")
                        .HasColumnType("datetime2");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Temperature");

                    b.HasData(
                        new
                        {
                            Id = new Guid("592ffb90-56e9-4dd6-8c07-b78c718b7d17"),
                            MeasurementUnits = "Kelvin",
                            RegisterTime = new DateTime(2020, 5, 22, 16, 50, 27, 258, DateTimeKind.Local).AddTicks(58),
                            Value = 14.0
                        });
                });

            modelBuilder.Entity("Weather.Persistence.Model.Wind", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Direction")
                        .HasColumnType("int");

                    b.Property<string>("MeasurementUnits")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegisterTime")
                        .HasColumnType("datetime2");

                    b.Property<double>("Speed")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Wind");

                    b.HasData(
                        new
                        {
                            Id = new Guid("eeed3ce2-cd98-4de9-b685-5b292f9584c6"),
                            Direction = 0,
                            MeasurementUnits = "m/s",
                            RegisterTime = new DateTime(2020, 5, 22, 16, 50, 27, 262, DateTimeKind.Local).AddTicks(811),
                            Speed = 5.0
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
